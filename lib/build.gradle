plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
        flavorDimensions "MARKET"
        direct {
            dimension "MARKET"
            buildConfigField "String", "MARKET", '"direct"'
        }
        auto {
            dimension "MARKET"
            buildConfigField "String", "MARKET", '"direct"'
        }
        cafeBazaar {
            dimension "MARKET"
            buildConfigField "String", "MARKET", '"cafebazaar"'
        }
        myket {
            dimension "MARKET"
            buildConfigField "String", "MARKET", '"myket"'
        }
    }

    defaultPublishConfig "autoRelease"
}

dependencies {
    implementation 'androidx.annotation:annotation:1.3.0'
}

task sourcesJar(type: Jar) {
    classifier  = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}

group = 'com.github.vahid-m.cluby-pwa-wrapper'
version = "1.0"

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->

        if (variant.name.toLowerCase().contains("debug")) {
            return
        }

        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]

        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }

        def flavorName = variant.flavorName
        def flavorSourcesTask = tasks.create(name: "${flavorName}SourcesJar", type: Jar) {
            classifier = "${flavorName}-sources"
            from android.sourceSets.main.javaDirectories
            from android.sourceSets[flavorName].javaDirectories
        }

        artifacts {
            archives flavorSourcesTask
        }

    }
}

